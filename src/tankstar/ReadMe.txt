========================================================================
    控制台应用程序：tankstar 项目概述
========================================================================

应用程序向导已为您创建了此 tankstar 应用程序。

本文件概要介绍组成 tankstar 应用程序的每个文件的内容。


tankstar.vcxproj
    这是使用应用程序向导生成的 VC++ 项目的主项目文件，
    其中包含生成该文件的 Visual C++ 
    的版本信息，以及有关使用应用程序向导选择的平台、配置和项目功能的信息。

tankstar.vcxproj.filters
    这是使用“应用程序向导”生成的 VC++ 项目筛选器文件。 
    它包含有关项目文件与筛选器之间的关联信息。 在 IDE 
    中，通过这种关联，在特定节点下以分组形式显示具有相似扩展名的文件。
    例如，“.cpp”文件与“源文件”筛选器关联。

tankstar.cpp
    这是主应用程序源文件。

/////////////////////////////////////////////////////////////////////////////
其他标准文件：

StdAfx.h，StdAfx.cpp
    这些文件用于生成名为 tankstar.pch 的预编译头 (PCH) 文件和
    名为 StdAfx.obj 的预编译类型文件。

/////////////////////////////////////////////////////////////////////////////
其他注释：

应用程序向导使用“TODO:”注释来指示应添加或自定义的源代码部分。

/////////////////////////////////////////////////////////////////////////////


核心引擎是一个沙盘
一个对象管理器

沙盘的核心是一个2*2矩阵，这额矩阵中每一个格子会有一些属性，
当对象移动到某个格子的时候会被这个格子时可能会被这个格子改变属性，对象也有可能改变格子的属性

对象身上也有一些属性，这些属性决定了接下来的一帧这个对象将如何被处理

沙盘是一帧一帧处理数据的，所有客户端都必须和服务器保持帧同步，

一帧的执行过程分为两步，操作和改变
	操作是一个对象或多个对象的处理，是交互式的，有可能是跨越服务器的，
	改变是一个对象的数值的改变，是一个对象的处理，是不会跨越服务器的，
	一帧内的操作的执行是没有顺序依赖的，就是逻辑上的同时，
	我们会对不同类型的改变来排一个序，这个顺序是定死的

帧和帧之间的的间隔叫逻辑秒，所有客户端和服务器基于逻辑秒向前推进，逻辑秒是最小的逻辑时间单位
	每一帧沙盘会处理这一帧应该处理的命令，这个处理是不可逆的
	这些命令很可能会改变沙盘中的对象或沙盘矩阵中的格子的属性
	处理完命令后会按照约定的顺序梳理所有的对象，上述过程也是不可逆的
		处理顺序：
			1：先处理父对象，再依次处理所有子对象
对象会保存所占用格子的坐标列表，通过坐标可以在沙盘中索引到格子访问格子的属性
每个格子也保存了占用这个格子的所有对象的指针或ID,可以方便的访问到这个对象

地图是无限大的，第一张地图是中点
	每张地图是100*100的格子，左上角的坐标是1，1，右下角的坐标是1000，1000， 没有0，0坐标
	一个服务器能够处理若干长地图
	每个地图有一个编号，这个编号是一个32位整数，(00101 - 1) / 100   101 - 100 /100 * 100 

同步机制
服务器会同步一屏内的所有数据到客户端，客户端会操作这些数据

一个服务处理若干张地图的数据，服务器和服务器之间需要同步数据

所有操作都是异步的，每一个操作都会产生一个结果，
这个结果是一个新的操作，大部分情况这个操作是个空操作，什么也不做，但是也有可能这个结果会产生一个新的操作
所有操作都放到一个栈中来处理，每一帧栈中的操作需要处理完，
然后产生一系列不需要跨对象的同步操作

所有场景通过分层来管理，每个进程都有一个顶层索引地图，通过顶层索引地图可以找到下层地图所在的进程，顶层地图的任何改变所有进程都需要同步，每个进程都可以取到任意一块地图的数据

同步单元，一个同步单元对应很多个格子，一个同步单元最多只能被一个进程处理，每个同步单元有一个操作栈，一个进程有可能会处理多个同步单元，一个同步区域有可能会覆盖一个或多个同步单元，同步单元是同步的最小单位




